/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Scala library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.7/userguide/building_java_projects.html
 */

import io.qameta.allure.gradle.AllureExtension

val versions = mapOf(
    "junit" to "4.13.2",
    "junit-jupiter" to "5.7.1",
    "junit-platform" to "1.7.1",
    "awaitility" to "4.0.3",
    "allure" to "2.13.9",
    "cucumber" to "6.10.3",
    "ktlint" to "0.41.0"
)

group = "com.test.j4.test"
project.version = "1.0.0"

plugins {
    `java-library`
    kotlin("jvm") version "1.4.32"
    id("io.gatling.gradle") version ("3.5.1")
    id("io.qameta.allure") version("2.8.1")
    id("org.jlleitschuh.gradle.ktlint") version ("10.0.0")
}

repositories {
    jcenter()
    mavenCentral()
    /*maven {
        url = uri("https://mvnrepository.com")
    }*/
}

dependencies {
    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation("com.google.guava:guava:29.0-jre")

    // testImplementation("junit:junit:${versions["junit"]}")

    testImplementation("org.junit.jupiter:junit-jupiter-api:${versions["junit-jupiter"]}")
    testImplementation("org.junit.jupiter:junit-jupiter-engine:${versions["junit-jupiter"]}")
    testImplementation("org.junit.jupiter:junit-jupiter-params:${versions["junit-jupiter"]}")
    testImplementation("org.junit.vintage:junit-vintage-engine:${versions["junit-jupiter"]}")

    testImplementation("org.junit.platform:junit-platform-launcher:${versions["junit-platform"]}")
    testImplementation("org.junit.platform:junit-platform-runner:${versions["junit-platform"]}")
    testImplementation("org.junit.platform:junit-platform-engine:${versions["junit-platform"]}")
    testImplementation("org.junit.platform:junit-platform-suite-api:${versions["junit-platform"]}")

    testImplementation("org.awaitility:awaitility:${versions["awaitility"]}")
    testImplementation("org.awaitility:awaitility-kotlin:${versions["awaitility"]}")

    implementation("io.cucumber:cucumber-core:${versions["cucumber"]}")
    implementation("io.cucumber:cucumber-java:${versions["cucumber"]}")
    implementation("io.cucumber:cucumber-gherkin:${versions["cucumber"]}")
    implementation("io.cucumber:gherkin:18.1.0")

    testImplementation("io.cucumber:cucumber-junit:${versions["cucumber"]}")
    implementation("io.cucumber:cucumber-junit-platform-engine:${versions["cucumber"]}")
    implementation("io.cucumber:cucumber-java8:${versions["cucumber"]}")

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api("org.apache.commons:commons-math3:3.6.1")

    implementation("io.qameta.allure:allure-java-commons:${versions["allure"]}")
    implementation("io.qameta.allure:allure-cucumber6-jvm:${versions["allure"]}")
    testImplementation("io.qameta.allure:allure-junit4:${versions["allure"]}")

    implementation("io.qameta.allure:allure-attachments:${versions["allure"]}")

    runtimeOnly("com.pinterest.ktlint:ktlint-core:${versions["ktlint"]}")
    runtimeOnly("com.pinterest.ktlint:ktlint-ruleset-standard:${versions["ktlint"]}")
    runtimeOnly("com.pinterest.ktlint:ktlint-reporter-plain:${versions["ktlint"]}")
}

tasks.compileJava {
    options.release.set(15)
}

sourceSets.main {
    java.srcDirs("src/main/kotlin", "src/main/java")
}
sourceSets.test {
    java.srcDirs("src/test/kotlin", "src/test/java")
}

tasks.test {
    filter {
        exclude("/e2e/**")
        exclude("com/test/j4test/e2e/**")
        excludeTestsMatching("com/test/j4test/e2e/**")
        exclude("TestRunner")
        useJUnitPlatform()
        // TODO: remove this one if not needed
        testLogging.showStandardStreams = true
    }
    maxParallelForks = 3
//    useJUnitPlatform()
//    // TODO: remove this one if not needed
//    testLogging.showStandardStreams = true
}

val cucumberRuntime: Configuration by configurations.creating
configurations {
    cucumberRuntime.extendsFrom(testImplementation.get())
}

tasks.register("cucumber") {
    dependsOn(listOf(tasks.assemble, tasks.testClasses))
    doLast {
        javaexec {
            systemProperty("allure.results.directory", "allure-results")
            main = "io.cucumber.core.cli.Main"
            classpath = cucumberRuntime + sourceSets.main.get().output + sourceSets.test.get().output
            args = listOf(
                "--plugin", "pretty",
                "--plugin", "io.qameta.allure.cucumber6jvm.AllureCucumber6Jvm",
                "--glue", "com.test.j4test.e2e", "src/test/resources/com/test/j4test/e2e"
            )
        }
    }
}

configure<AllureExtension> {
    autoconfigure = true
    aspectjweaver = true
    version = versions["allure"]
    // allureJavaVersion = "16"

    clean = true

    resultsDir = file("../../allure-results")
    reportDir = file("../../allure-reports")

    useJUnit5 {
        version = versions["allure"]
    }
}

tasks.named<Wrapper>("wrapper") {
    gradleVersion = "7.0"
    distributionType = Wrapper.DistributionType.ALL
}
